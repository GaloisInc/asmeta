/**
 * generated by Xtext 2.32.0
 */
package asmeta.avallaxt.formatting2;

import asmeta.avallaxt.avalla.Block;
import asmeta.avallaxt.avalla.Element;
import asmeta.avallaxt.avalla.Invariant;
import asmeta.avallaxt.avalla.Scenario;
import asmeta.avallaxt.services.AvallaGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class AvallaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AvallaGrammarAccess _avallaGrammarAccess;

  protected void _format(final Scenario scenario, @Extension final IFormattableDocument document) {
    EList<Invariant> _invariants = scenario.getInvariants();
    for (final Invariant invariant : _invariants) {
      document.<Invariant>format(invariant);
    }
    EList<Element> _elements = scenario.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  protected void _format(final Block block, @Extension final IFormattableDocument document) {
    EList<Element> _elements = block.getElements();
    for (final Element element : _elements) {
      document.<Element>format(element);
    }
  }

  public void format(final Object block, final IFormattableDocument document) {
    if (block instanceof XtextResource) {
      _format((XtextResource)block, document);
      return;
    } else if (block instanceof Block) {
      _format((Block)block, document);
      return;
    } else if (block instanceof Scenario) {
      _format((Scenario)block, document);
      return;
    } else if (block instanceof EObject) {
      _format((EObject)block, document);
      return;
    } else if (block == null) {
      _format((Void)null, document);
      return;
    } else if (block != null) {
      _format(block, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(block, document).toString());
    }
  }
}
