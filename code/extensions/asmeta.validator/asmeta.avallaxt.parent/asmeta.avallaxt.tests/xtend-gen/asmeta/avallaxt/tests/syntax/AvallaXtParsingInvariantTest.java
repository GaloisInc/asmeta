/**
 * generated by Xtext 2.14.0
 */
package asmeta.avallaxt.tests.syntax;

import asmeta.avallaxt.avalla.Scenario;
import asmeta.avallaxt.tests.AvallaInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvallaInjectorProvider.class)
@SuppressWarnings("all")
public class AvallaXtParsingInvariantTest {
  @Inject
  private ParseHelper<Scenario> parseHelper;

  @Test
  public void inv1() {
    this.test("x");
  }

  @Test
  public void inv2() {
    this.test("x + yy");
    this.test("f(x,6) + yy = 90");
  }

  @Test
  public void invmolte() {
    this.test("x > 0");
  }

  public void test(final String i) {
    try {
      InputOutput.<String>println(("testing with " + i));
      final String scenario = (("scenario scen load spec invariant myInv : " + i) + " ;");
      final Scenario result = this.parseHelper.parse(scenario);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder.toString(), errors.isEmpty());
      Assert.assertEquals(((Scenario) result).getInvariants().get(0).getExpression(), i);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
