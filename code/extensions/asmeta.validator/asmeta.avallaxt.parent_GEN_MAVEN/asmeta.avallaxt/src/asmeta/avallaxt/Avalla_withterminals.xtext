grammar org.asmeta.AvallaXt /*with org.eclipse.xtext.common.Terminals*/ hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate avallaXt "http://www.asmeta.org/AvallaXt"

Scenario:
	'scenario' name=ID
	'load' spec=Path
	invariants+=Invariant*
	elements+=Element*;

Invariant:
	'invariant' name=ID ':' expression=sc_ended_line ";";

Element:
	Command | Block;

Command:
	Check | Set | {Step} Step | StepUntil | Exec | ExecBlock;

Check:
	'check' expression=sc_ended_line ";";

Set:
	'set' location = (LOCATION|ID) ':=' value= sc_ended_line ";";

//Step returns Step:
//	{Step} 'step';

Step: 'step' ;

StepUntil:
	'step' 'until' expression = sc_ended_line ";" ;

Exec:
	'exec' rule= sc_ended_line ";";

Block:
	'begin' name=ID
	elements+=Element*
	'end';

ExecBlock:
	'execblock' scenario=[Scenario] '.' block=[Block] ';';	

// remove spaces from hidden otherwise cannot be used for example in strings
// allow also ID
Path /*hidden()*/:
	(FILENAME | STRING | ID);

//Note that the order of terminal rules is crucial for your grammar, as they may shadow each other. 
// This is especially important for newly introduced rules in connection with imported rules from used grammars.

// a number also with decimal
terminal NUMBER:
	 ('0'..'9')* ('.'('0'..'9')*)?;

// any char except space or if space or between "" with space	
terminal ID:
	/*'^'?*/ ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

// Location like
// NOT THAT location can be ID. So it must come after
// f(8) kkl(o,k)
terminal LOCATION: ID ("(" (ID  | NUMBER | STRING) (',' (ID | NUMBER | STRING))* ")")?;


// relativo o assoluto (extends ID)
// questoda problemi perchè se scrivo x:= 10 il "x:" lo prende come FILENAME, quindi chiede lo spazio 
terminal FILENAME:
	('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '.' | '\\' | '/')+;

	// a string between double quotes
terminal STRING:
	'"' (!('"'))* '"';

	// standard
terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

	// a sequence of char string terminated by ; semicolon
	// it can be also a string like "even"
	// it can be found also assignemnts in case of exec, like c:=y
sc_ended_line:
	(FILENAME | ID | LOCATION | ALL_BUT_SC | STRING | NUMBER | ':=')+;

	// all words execpt semicolon
	// it can be found in terms like d(i) > k + 2
terminal ALL_BUT_SC:
	(('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '(' | ')' | '.' | ',' | '+' | '-' | '*' | '/' | '>' | '<' | '=')+);

	
/* alcune idee
 * terminal ANY_EXCEPT_CLOSING_PARENTHESIS :
	( '\u0000'..'\u0028')* | ('\u0030'..'\uFFFF')*;
 * 
 */	
	
