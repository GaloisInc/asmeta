/*
 * generated by Xtext 2.14.0
 */
package asmeta.avallaxt.tests.syntax

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import asmeta.avallaxt.tests.AvallaInjectorProvider
import asmeta.avallaxt.avalla.Scenario
import asmeta.avallaxt.avalla.ExecBlock
import asmeta.avallaxt.avalla.Step
import asmeta.avallaxt.avalla.Block
import asmeta.avallaxt.avalla.Check

@RunWith(XtextRunner)
@InjectWith(AvallaInjectorProvider)
class AvallaXtParsingCheckTest {
	@Inject
	ParseHelper<Scenario> parseHelper
	
	
	@Test
	def void checktest() {
		test("x = 10"); 
		test("name(currentState(evenFsm)) = \"even\""); 
	}

	
	def void test(String check){
		println("testing with " + check)
		val scenario = "scenario scen load spec check "+ check +  ";";
		val result = parseHelper.parse(scenario)
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		Assert.assertTrue('''Unexpected errors: �errors.join(", ")�''', errors.isEmpty)
		Assert.assertEquals(((result as Scenario).elements.get(0) as Check).expression, check.trim);
	}
}
