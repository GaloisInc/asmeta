/**
 * generated by Xtext 2.14.0
 */
package asmeta.avallaxt.tests.syntax;

import asmeta.avallaxt.avalla.Block;
import asmeta.avallaxt.avalla.Element;
import asmeta.avallaxt.avalla.ExecBlock;
import asmeta.avallaxt.avalla.Scenario;
import asmeta.avallaxt.avalla.Step;
import asmeta.avallaxt.tests.AvallaInjectorProvider;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(AvallaInjectorProvider.class)
@SuppressWarnings("all")
public class AvallaXtParsingBlockTest {
  @Inject
  private ParseHelper<Scenario> parseHelper;

  @Test
  public void checktest() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("scenario alpha");
      _builder.newLine();
      _builder.append("load lll");
      _builder.newLine();
      _builder.append("execblock sc1:blocco1; ");
      _builder.newLine();
      _builder.newLine();
      final Scenario result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
      InputOutput.<Element>println(((Scenario) result).getElements().get(0));
      Element _get = ((Scenario) result).getElements().get(0);
      Assert.assertEquals("sc1", ((ExecBlock) _get).getScenario());
      Element _get_1 = ((Scenario) result).getElements().get(0);
      Assert.assertEquals("blocco1", ((ExecBlock) _get_1).getBlock());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void checktestNOScenario() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("scenario alpha");
      _builder.newLine();
      _builder.append("load lll");
      _builder.newLine();
      _builder.append("execblock blocco1; ");
      _builder.newLine();
      _builder.newLine();
      final Scenario result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
      InputOutput.<Element>println(((Scenario) result).getElements().get(0));
      Element _get = ((Scenario) result).getElements().get(0);
      Assert.assertNull(((ExecBlock) _get).getScenario());
      Element _get_1 = ((Scenario) result).getElements().get(0);
      Assert.assertEquals("blocco1", ((ExecBlock) _get_1).getBlock());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void checktestBlock() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("scenario alpha");
      _builder.newLine();
      _builder.append("load lll");
      _builder.newLine();
      _builder.append("begin blocco1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("step");
      _builder.newLine();
      _builder.append("end ");
      _builder.newLine();
      _builder.newLine();
      final Scenario result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
      Element _get = ((Scenario) result).getElements().get(0);
      final EList<Element> element = ((Block) _get).getElements();
      Assert.assertEquals(1, element.size());
      InputOutput.<EList<Element>>println(element);
      Element _get_1 = element.get(0);
      Assert.assertTrue((_get_1 instanceof Step));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  @Test
  public void checktestNestedBlock() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("scenario alpha");
      _builder.newLine();
      _builder.append("load lll");
      _builder.newLine();
      _builder.append("begin blocco1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("begin blocco2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("step");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("end");
      _builder.newLine();
      _builder.append("end ");
      _builder.newLine();
      _builder.newLine();
      final Scenario result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: �errors.join(\", \")�");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
      Element _get = ((Scenario) result).getElements().get(0);
      InputOutput.<EList<Element>>println(((Block) _get).getElements());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
